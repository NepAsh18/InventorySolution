@using InventorySolution.Models.ViewModels
@model ShipmentDetailsViewModel

@{
    ViewData["Title"] = $"Shipment Details - Order #{Model.OrderId}";
     Layout = "_AdminLayout";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Shipment Tracking - Order #@Model.OrderId</h1>
        <a asp-action="Index" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left"></i> Back to List
        </a>
    </div>

    <div class="card shadow-sm mb-4">
        <div class="card-header bg-primary text-white">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Order Summary</h5>
                <span class="badge bg-light text-dark fs-6">
                    <i class="bi bi-calendar-check"></i> 
                    Ordered: @Model.OrderDate.ToString("d MMM yyyy")
                </span>
            </div>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <dl class="row">
                        <dt class="col-sm-4">Customer:</dt>
                        <dd class="col-sm-8">@Model.CustomerName</dd>
                        
                        <dt class="col-sm-4">Destination:</dt>
                        <dd class="col-sm-8">@Model.CustomerLocation</dd>
                    </dl>
                </div>
                <div class="col-md-6">
                    <dl class="row">
                        <dt class="col-sm-4">Origin Warehouse:</dt>
                        <dd class="col-sm-8">@Model.Warehouse</dd>
                        
                        <dt class="col-sm-4">Estimated Delivery:</dt>
                        <dd class="col-sm-8">@Model.EstimatedDelivery.ToString("d MMM yyyy")</dd>
                        
                        <dt class="col-sm-4">Last Update:</dt>
                        <dd class="col-sm-8">@(Model.LastStatusChange?.ToString("g") ?? "N/A")</dd>
                    </dl>
                </div>
            </div>
        </div>
    </div>

    <!-- Shipment Tracking Visualization -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-info text-white">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Shipment Journey</h5>
                <span class="badge bg-light text-dark fs-6">
                    <i class="bi @GetStatusIcon(Model.Status)"></i> 
                    Current Status: @Model.Status
                </span>
            </div>
        </div>
        <div class="card-body">
            <div class="shipment-tracker">
                @for (int i = 0; i < Model.RoutePoints.Count; i++)
                {
                    var point = Model.RoutePoints[i];
                    var isFirst = i == 0;
                    var isLast = i == Model.RoutePoints.Count - 1;
                    
                    <div class="tracker-point @(isFirst ? "start-point" : "") @(isLast ? "end-point" : "")">
                        <div class="point-icon">
                            <i class="bi @GetPointIcon(point, isFirst, isLast)"></i>
                        </div>
                        <div class="point-label">@point</div>
                    </div>
                    
                    if (!isLast)
                    {
                        <div class="tracker-line">
                            <div class="progress-bar" style="width: @(i == Model.RoutePoints.Count - 2 ? Model.ProgressPercentage + "%" : "100%")">
                                @if (i == Model.RoutePoints.Count - 2)
                                {
                                    <div class="progress-icon">
                                        <i class="bi bi-truck"></i>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                }
            </div>
            
            <!-- Status Update Form -->
            <div class="mt-4">
                <form asp-action="UpdateStatus" method="post" class="row g-3">
                    <input type="hidden" name="id" value="@Model.OrderId" />
                    <div class="col-md-8">
                        <select name="status" class="form-select">
                            <option value="">-- Update Shipment Status --</option>
                            @foreach (var status in Enum.GetValues(typeof(OrderStatus)))
                            {
                                <option value="@status">@status</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-4">
                        <button type="submit" class="btn btn-primary w-100">
                            <i class="bi bi-arrow-repeat"></i> Update Status
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Order Items -->
    <div class="card shadow-sm">
        <div class="card-header bg-secondary text-white">
            <h5 class="mb-0">Order Contents</h5>
        </div>
        <div class="card-body">
            <table class="table">
                <thead>
                    <tr>
                        <th>Product</th>
                        <th>Quantity</th>
                        <th>Price</th>
                        <th>Subtotal</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Items)
                    {
                        <tr>
                            <td>@item.ProductName</td>
                            <td>@item.Quantity</td>
                            <td>Rs @item.Price.ToString("N2")</td>
                            <td>Rs @((item.Quantity * item.Price).ToString("N2"))</td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr class="table-success">
                        <th colspan="3" class="text-end">Total:</th>
                        <th>Rs @Model.TotalAmount.ToString("N2")</th>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>
</div>

<style>
    .shipment-tracker {
        display: flex;
        align-items: center;
        margin: 20px 0;
        overflow-x: auto;
        padding: 10px 0;
    }
    
    .tracker-point {
        display: flex;
        flex-direction: column;
        align-items: center;
        min-width: 150px;
        z-index: 2;
    }
    
    .point-icon {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: #0d6efd;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        margin-bottom: 10px;
    }
    
    .start-point .point-icon {
        background: #0d6efd;
    }
    
    .end-point .point-icon {
        background: #198754;
    }
    
    .tracker-line {
        flex-grow: 1;
        height: 8px;
        background: #e9ecef;
        position: relative;
        border-radius: 4px;
        overflow: hidden;
        min-width: 100px;
    }
    
    .progress-bar {
        position: absolute;
        height: 100%;
        background: linear-gradient(90deg, #0d6efd, #198754);
        transition: width 0.5s ease;
    }
    
    .progress-icon {
        position: absolute;
        right: -20px;
        top: 50%;
        transform: translateY(-50%);
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: #ffc107;
        color: #000;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 20px;
        animation: pulse 2s infinite;
        z-index: 3;
    }
    
    @@keyframes pulse {
        0% { box-shadow: 0 0 0 0 rgba(255, 193, 7, 0.7); }
        70% { box-shadow: 0 0 0 10px rgba(255, 193, 7, 0); }
        100% { box-shadow: 0 0 0 0 rgba(255, 193, 7, 0); }
    }
    
    .point-label {
        text-align: center;
        font-weight: 500;
        background: white;
        padding: 2px 8px;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
</style>

@functions {
    string GetStatusBadgeClass(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "bg-secondary",
            OrderStatus.Processing => "bg-info",
            OrderStatus.Shipped => "bg-primary",
            OrderStatus.Delivered => "bg-success",
            _ => "bg-secondary"
        };
    }
    
    string GetPointIcon(string point, bool isFirst, bool isLast)
    {
        if (isFirst) return "bi-building";
        if (isLast) return "bi-house-door";
        if (point.Contains("Center") || point.Contains("Hub")) return "bi-buildings";
        if (point.Contains("Facility") || point.Contains("Depot")) return "bi-box-seam";
        return "bi-geo-alt";
    }
    
    string GetStatusIcon(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "bi-hourglass-split",
            OrderStatus.Processing => "bi-gear",
            OrderStatus.Shipped => "bi-truck",
            OrderStatus.Delivered => "bi-check-circle",
            _ => "bi-question-circle"
        };
    }
}