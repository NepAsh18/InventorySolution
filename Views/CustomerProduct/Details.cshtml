@using InventorySolution.Models.Entities
@model Product
@{
    ViewData["Title"] = "Product Details";
    Layout = "_CustomerLayout";
    var recentProducts = ViewBag.RecentProducts as List<Product> ?? new List<Product>();
}

<style>
    :root {
        --primary: #56DFCF;
        --secondary: #FCECDD;
        --background: #FFFFFF;
        --accent: #FFF2E0;
        --text: #333333;
        --price: #e74c3c;
    }

    .product-detail-container {
        background-color: var(--background);
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.08);
        overflow: hidden;
        margin-bottom: 40px;
    }

    .detail-header {
        background: linear-gradient(to right, var(--secondary), var(--accent));
        padding: 30px;
        border-bottom: 3px solid var(--primary);
    }

    .detail-body {
        padding: 40px;
    }

    .product-title {
        color: var(--text);
        font-weight: 800;
        margin-bottom: 10px;
        font-size: 2.2rem;
    }

    .product-category {
        background-color: var(--primary);
        color: white;
        padding: 6px 18px;
        border-radius: 25px;
        font-size: 1rem;
        display: inline-block;
        font-weight: 500;
    }

    .product-image-container {
        background-color: var(--accent);
        border-radius: 12px;
        padding: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
        min-height: 350px;
        border: 2px dashed rgba(86, 223, 207, 0.3);
    }

    .product-image {
        max-height: 350px;
        max-width: 100%;
        object-fit: contain;
    }

    .price-display {
        font-size: 1.8rem;
        font-weight: 800;
        color: var(--price);
        margin: 20px 0;
    }

    .specs-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0 12px;
    }

        .specs-table tr td {
            padding: 12px 20px;
            border-bottom: 1px solid #eee;
        }

        .specs-table tr:last-child td {
            border-bottom: none;
        }

    .info-label {
        font-weight: 700;
        color: #555;
        width: 40%;
    }

    .info-value {
        color: var(--text);
        font-weight: 500;
    }

    .btn-addtocart {
        background: linear-gradient(to right, var(--secondary), var(--accent));
        color: var(--text);
        border: 2px solid var(--primary);
        padding: 14px 0;
        border-radius: 50px;
        font-weight: 700;
        font-size: 1.1rem;
        transition: all 0.3s;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        display: block;
        width: 100%;
        margin-bottom: 15px;
    }

        .btn-addtocart:hover {
            background: linear-gradient(to right, var(--primary), #3EC7B5);
            color: white;
            border-color: transparent;
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(86, 223, 207, 0.4);
        }

    .btn-order {
        background: linear-gradient(to right, var(--primary), #3EC7B5);
        color: white;
        border: none;
        padding: 16px 0;
        border-radius: 50px;
        font-weight: 700;
        font-size: 1.2rem;
        transition: all 0.3s;
        box-shadow: 0 8px 20px rgba(86, 223, 207, 0.4);
        display: block;
        width: 100%;
        margin-top: 15px;
        letter-spacing: 0.5px;
    }

        .btn-order:hover {
            transform: translateY(-3px);
            box-shadow: 0 12px 25px rgba(86, 223, 207, 0.5);
        }

    .quantity-selector {
        display: flex;
        align-items: center;
        margin: 20px 0;
    }

    .quantity-label {
        margin-right: 15px;
        font-weight: 600;
        color: #555;
    }

    .quantity-input {
        width: 80px;
        padding: 8px 12px;
        border: 2px solid var(--primary);
        border-radius: 8px;
        text-align: center;
        font-weight: 600;
    }

    .recent-section {
        background-color: var(--background);
        border-radius: 15px;
        padding: 30px;
        box-shadow: 0 5px 20px rgba(0,0,0,0.05);
    }

    .section-title {
        color: var(--text);
        position: relative;
        padding-bottom: 15px;
        margin-bottom: 30px;
        font-weight: 700;
    }

        .section-title:after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 60px;
            height: 4px;
            background: var(--primary);
            border-radius: 2px;
        }

    .recent-product {
        transition: all 0.3s;
        border-radius: 12px;
        overflow: hidden;
        background: var(--background);
        box-shadow: 0 4px 15px rgba(0,0,0,0.05);
        height: 100%;
    }

        .recent-product:hover {
            transform: translateY(-8px);
            box-shadow: 0 12px 25px rgba(86, 223, 207, 0.2);
        }

    .recent-img-container {
        height: 160px;
        background-color: var(--accent);
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 15px;
    }

    .recent-img {
        max-height: 100%;
        max-width: 100%;
        object-fit: contain;
    }

    .recent-body {
        padding: 20px;
    }

    .recent-title {
        font-size: 1.1rem;
        font-weight: 700;
        margin-bottom: 8px;
        color: var(--text);
        height: 50px;
        overflow: hidden;
    }

    .recent-category {
        background-color: var(--secondary);
        color: var(--text);
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.8rem;
        display: inline-block;
        font-weight: 500;
    }

    .recent-price {
        color: var(--price);
        font-weight: 700;
        font-size: 1rem;
    }

    .recent-stats {
        display: flex;
        justify-content: space-between;
        margin-top: 15px;
        font-size: 0.9rem;
        align-items: center;
    }

    .detail-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 20px;
    }

    .alert-cart {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
        animation: slideIn 0.5s forwards;
    }

    @@keyframes slideIn {
        from {
            transform: translateX(100%);
        }

        to {
            transform: translateX(0);
        }
    }
</style>

<div class="detail-container">
    @if (TempData["CartMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show alert-cart" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i> @TempData["CartMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="product-detail-container">
        <div class="detail-header">
            <h1 class="product-title">@Model.Name</h1>
            <span class="product-category">@Model.Category?.Name</span>
        </div>

        <div class="detail-body">
            <div class="row">
                <div class="col-lg-6 mb-4">
                    <div class="product-image-container">
                        @if (!string.IsNullOrEmpty(Model.ImagePath))
                        {
                            <img src="@Model.ImagePath" class="product-image" alt="@Model.Name">
                        }
                        else
                        {
                            <i class="bi bi-image text-muted" style="font-size: 4rem;"></i>
                        }
                    </div>
                </div>

                <div class="col-lg-6">
                    <h3 class="mb-4">Product Specifications</h3>

                    <div class="price-display">
                        Rs @Model.Price.ToString("N2")
                    </div>

                    <table class="specs-table mb-4">
                        <tr>
                            <td class="info-label">Description</td>
                            <td class="info-value">@Model.Description</td>
                        </tr>
                        <tr>
                            <td class="info-label">Category</td>
                            <td class="info-value">@Model.Category?.Name</td>
                        </tr>
                        <tr>
                            <td class="info-label">Unit Measure</td>
                            <td class="info-value">@Model.UnitMeasure?.Name</td>
                        </tr>
                        <tr>
                            <td class="info-label">Manufacture Date</td>
                            <td class="info-value">@Model.ManufacturedDate.ToString("dd MMM yyyy")</td>
                        </tr>
                        <tr>
                            <td class="info-label">Expiry Date</td>
                            <td class="info-value">@Model.ExpiryDate.ToString("dd MMM yyyy")</td>
                        </tr>
                        <tr>
                            <td class="info-label">Available Quantity</td>
                            <td class="info-value"><span class="badge bg-success">@Model.Quantity units</span></td>
                        </tr>
                    </table>

                    <!-- Add Quantity -->
                    <div class="quantity-selector mb-3">
                        <span class="quantity-label">Quantity:</span>
                        <input type="number" id="quantityInput" class="form-control"
                               style="width: 100px; display: inline-block;"
                               min="1" max="@Model.Quantity" value="1" required>
                    </div>

                    <!-- Add to Cart Form -->
                    <form asp-action="AddToCart" method="post" class="d-inline">
                        <input type="hidden" name="productId" value="@Model.Id" />
                        <input type="hidden" name="quantity" id="addToCartQuantity" value="1" />

                        <button type="submit" class="btn btn-primary me-2">
                            <i class="bi bi-cart-plus me-2"></i> ADD TO CART
                        </button>
                    </form>

                    <!-- Order Now Form -->
                    <form method="post" class="d-inline">
                        <input type="hidden" name="productId" value="@Model.Id" />
                        <input type="hidden" name="quantity" id="orderNowQuantity" value="1" />

                        <button type="submit" asp-action="OrderNow"
                                class="btn"
                                style="background: linear-gradient(to right, #56DFCF, #708A58);
                   color: white;
                   border-radius: 50px;
                   padding: 8px 25px;
                   font-weight: 600;
                   border: none;">
                            <i class="bi bi-lightning me-2"></i> ORDER NOW
                        </button>
                    </form>



                </div>
            </div>
        </div>
    </div>

    <!-- Recently Viewed Products Section -->
    @if (recentProducts != null && recentProducts.Count > 0)
    {
        <div class="recent-section">
            <h3 class="section-title">Recently Viewed Products</h3>
            <div class="row">
                @foreach (var product in recentProducts)
                {
                    <div class="col-xl-3 col-lg-4 col-md-6 mb-4">
                        <a asp-controller="CustomerProduct" asp-action="Details" asp-route-id="@product.Id" class="text-decoration-none">
                            <div class="recent-product">
                                <div class="recent-img-container">
                                    @if (!string.IsNullOrEmpty(product.ImagePath))
                                    {
                                        <img src="@product.ImagePath" class="recent-img" alt="@product.Name">
                                    }
                                    else
                                    {
                                        <i class="bi bi-image text-muted" style="font-size: 2.5rem;"></i>
                                    }
                                </div>
                                <div class="recent-body">
                                    <h5 class="recent-title">@product.Name</h5>
                                    <span class="recent-category">@product.Category?.Name</span>
                                    <div class="recent-stats">
                                        <span class="recent-price">Rs @product.Price.ToString("N2")</span>
                                        <span class="text-primary fw-bold">View →</span>
                                    </div>
                                </div>
                            </div>
                        </a>
                    </div>
                }
            </div>
        </div>
    }
</div>

<script>
    $(document).ready(function () {
        // Auto-dismiss alert after 3 seconds
        setTimeout(function () {
            $('.alert').alert('close');
        }, 3000);

        // Order Now functionality with enhanced debugging
        const quantityInput = document.getElementById('quantityInput');
        const orderNowButton = document.getElementById('orderNowButton');
        const orderNowQuantity = document.getElementById('orderNowQuantity');
        const orderNowForm = document.getElementById('orderNowForm');

        // Initialize and sync quantity
        if (quantityInput && orderNowQuantity) {
            orderNowQuantity.value = quantityInput.value;

            quantityInput.addEventListener('change', function () {
                orderNowQuantity.value = this.value;
            });

            quantityInput.addEventListener('input', function () {
                orderNowQuantity.value = this.value;
            });
        }

        // Handle button click
        if (orderNowButton && orderNowForm) {
            orderNowButton.addEventListener('click', function () {
                // Final sync
                if (quantityInput && orderNowQuantity) {
                    orderNowQuantity.value = quantityInput.value;
                }
                // Submit form
                orderNowForm.submit();
            });
        }
    });
</script>

<script>
    // Update both hidden quantity fields when visible input changes
    document.getElementById('quantityInput').addEventListener('change', function() {
        const quantity = this.value;
        document.getElementById('addToCartQuantity').value = quantity;
        document.getElementById('orderNowQuantity').value = quantity;
    });
</script>
<script>
    // Sync quantity input with both forms
    document.getElementById('quantityInput').addEventListener('change', function() {
        const quantity = Math.max(1, Math.min(this.value, @Model.Quantity));
        this.value = quantity;  // Ensure within limits
        document.getElementById('addToCartQuantity').value = quantity;
        document.getElementById('orderNowQuantity').value = quantity;
    });
</script>